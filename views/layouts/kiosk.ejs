<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
		<title><%- locals.title %></title>
		<link rel="icon" type="image/x-icon" href="assets/favicon.ico" />
		<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css" rel="stylesheet" />
		<link href="/css/kiosk.css" rel="stylesheet" />
		<link href="/css/kiosk0.css" rel="stylesheet" />
	</head>
	<body>

    <%- include('../partials/kiosk_navbar.ejs') %>

		<%- body %>

		<%- include('../partials/kiosk_footer.ejs') %>

		<!-- Bootstrap core JS-->
		<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
		<!-- Core theme JS-->
		<script src="js/scripts.js"></script>
		<script>
			let orderItems = [];

			document.addEventListener('DOMContentLoaded', function () {
				loadOrderItems(); // Load previously saved order items from localStorage

				document.querySelectorAll('.add-to-order').forEach(button => {
					button.addEventListener('click', function () {
						const productId = this.dataset.id;
						const productName = this.dataset.name;
						const productPrice = parseFloat(this.dataset.price);
						const productImage = this.dataset.image;
						
						addToOrder(productId, productName, productPrice, productImage);
					});
				});
			});

			function addToOrder(productId, productName, productPrice, productImage) {
				const existingProduct = orderItems.find(item => item.id === productId);
				
				if (existingProduct) {
					existingProduct.quantity += 1;
				} else {
					orderItems.push({
						id: productId,
						name: productName,
						price: productPrice,
						image: productImage,
						quantity: 1
					});
				}

				updateOrderSummary();
				updateCartBadge();
				saveOrderItems();  // Save to localStorage
			}

			function incrementProductQuantity(productId) {
				const product = orderItems.find(item => item.id === productId);
				if (product) {
					product.quantity += 1;
					updateOrderSummary();
					updateCartBadge();
					saveOrderItems();  // Save to localStorage
				}
			}

			function decrementProductQuantity(productId) {
				const product = orderItems.find(item => item.id === productId);
				if (product) {
					if (product.quantity > 1) {
						product.quantity -= 1;
					} else {
						// If quantity is 1 and the user tries to decrement, remove the item from the order
						orderItems = orderItems.filter(item => item.id !== productId);
					}
					updateOrderSummary();
					updateCartBadge();
					saveOrderItems();  // Save to localStorage
				}
			}
			
			function updateOrderSummary() {
				const orderSummaryContainer = document.querySelector('.order-summary');
				orderSummaryContainer.innerHTML = ''; // Clear the current order summary
		
				let totalAmount = 0;
		
				orderItems.forEach(item => {
					const itemTotal = item.price * item.quantity;
					totalAmount += itemTotal;
		
					const orderItemHTML = `
						<div class="row mb-4 d-flex justify-content-between align-items-center">
							<div class="col-md-2 col-lg-2 col-xl-2">
								<img src="${item.image}" class="img-fluid rounded-3">
							</div>

							<div class="col-md-3 col-lg-3 col-xl-3">
								<h6 class="mb-1">${item.name}</h6>
							</div>

							<div class="col-md-3 col-lg-3 col-xl-2 d-flex">
								<button class="btn px-2 decrement-item" data-id="${item.id}">
									<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="#000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-minus"><line x1="5" y1="12" x2="19" y2="12"></line></svg>
								</button>

								<input min="0" value="${item.quantity}" type="number" class="form-control form-control-sm" readonly/>

								<button class="btn btn-link px-2 increment-item" data-id="${item.id}">
									<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="#000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-plus"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
								</button>
							</div>

							<div class="col-md-3 col-lg-2 col-xl-2 offset-lg-1">
								<h6 class="mb-0">₱${itemTotal.toFixed(2)}</h6>
							</div>
						</div>
						<hr class="my-2">
					`;
		
					orderSummaryContainer.insertAdjacentHTML('beforeend', orderItemHTML);
				});
		
				// Update the total amount
				document.querySelector('.total-amount').textContent = `₱${totalAmount.toFixed(2)}`;

				document.querySelectorAll('.increment-item').forEach(button => {
					button.addEventListener('click', function () {
						const productId = this.dataset.id;
						incrementProductQuantity(productId);
					});
				});

				document.querySelectorAll('.decrement-item').forEach(button => {
					button.addEventListener('click', function () {
						const productId = this.dataset.id;
						decrementProductQuantity(productId);
					});
				});
			}

			function updateCartBadge() {
				const totalItems = orderItems.reduce((acc, item) => acc + item.quantity, 0);
				document.querySelector('.badge').textContent = totalItems;
			}

			function saveOrderItems() {
				localStorage.setItem('orderItems', JSON.stringify(orderItems));
			}

			function loadOrderItems() {
				const savedOrderItems = localStorage.getItem('orderItems');
				if (savedOrderItems) {
					orderItems = JSON.parse(savedOrderItems);
					updateOrderSummary();
					updateCartBadge();
				}
			}
			// ------------------------------------------------------------------------
			// RECEIPT MODAL
			document.querySelector('.btn-dark').addEventListener('click', function() {
				// Capture customer name and order type
				const customerName = document.querySelector('input.customer-name').value;
				const orderType = document.querySelector('.form-select').selectedOptions[0].text;

				// Validate that there are items in the order
				if (orderItems.length === 0) {
					alert('Your order is empty. Please add items to your order before confirming.');
					return; // Stop further execution
				}

				// Validate that the customer name is provided
				if (!customerName) {
					alert('Please enter the customer name.');
					return; // Stop further execution
				}

				// Generate a random order number
				const orderNumber = 'ORD-' + Math.floor(1000 + Math.random() * 9000);

				// Set the values in the receipt modal
				document.getElementById('orderNumber').textContent = orderNumber;
				document.getElementById('customerName').textContent = customerName;
				document.getElementById('orderType').textContent = orderType;

				let totalAmount = 0;
				const receiptSummaryContainer = document.getElementById('receiptOrderSummary');
				receiptSummaryContainer.innerHTML = ''; // Clear previous summary

				orderItems.forEach(item => {
					const itemTotal = item.price * item.quantity;
					totalAmount += itemTotal;

					const receiptItemHTML = `
						<div class="d-flex justify-content-between">
							<div>${item.name} (${item.quantity} x ₱${item.price.toFixed(2)})</div>
							<div>₱${itemTotal.toFixed(2)}</div>
						</div>
					`;

					receiptSummaryContainer.insertAdjacentHTML('beforeend', receiptItemHTML);
				});

				document.getElementById('receiptTotalAmount').textContent = totalAmount.toFixed(2);

				// Show the receipt modal
				const receiptModal = new bootstrap.Modal(document.getElementById('receiptModal'));
				receiptModal.show();
			});

			// confirm order ----------------------------------------------------------
			document.querySelector('.btn-success').addEventListener('click', function() {
				const orderNumber = document.getElementById('orderNumber').textContent;
				const customerName = document.getElementById('customerName').textContent;
				const orderType = document.getElementById('orderType').textContent;
				const totalAmount = parseFloat(document.getElementById('receiptTotalAmount').textContent);

				const orderData = {
					orderNumber: orderNumber,
					customerName: customerName,
					orderItems: orderItems,
					orderType: orderType,
					totalAmount: totalAmount,
					status: 'In Process'
				};

				async function submitOrder() {
					try {
						const response = await fetch('/kiosk/orders', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(orderData)
            });

						const data = await response.json();

						if (data.success) {
                alert('Order confirmed');
								clearOrderSummary();
						} else {
                alert('Failed to save the order. Please try again.');
            }
					} catch (error) {
						console.error('Error details:', error);
            alert('An error occurred. Please try again.');
					}
				}

				submitOrder();

				function clearOrderSummary() {
					orderItems = []; // Clear the array holding the order items

					const orderSummaryContainer = document.querySelector('.order-summary');
					orderSummaryContainer.innerHTML = ''; // Clear the container

					updateOrderSummary(); // Re-render the summary with the cleared items
					updateCartBadge(); // Reset the cart badge

					// Reset the receipt modal fields
					document.getElementById('orderNumber').textContent = ''; // Clear order number
					document.getElementById('customerName').textContent = ''; // Clear customer name
					document.getElementById('orderType').textContent = ''; // Clear order type
					document.getElementById('receiptTotalAmount').textContent = '0.00'; // Reset total amount
				}	
				
			});
		</script>

		
	</body>
</html>
