<nav class="navbar navbar-expand-lg navbar-light bg-light">
  <div class="container px-4 px-lg-5">
    <a class="navbar-brand" href="/kiosk"><%= companyname %></a>
    <!-- toggle button -->
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation"><span class="navbar-toggler-icon"></span></button>
    <!-- collapse -->
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <ul class="navbar-nav me-auto mb-2 mb-lg-0 ms-lg-4">
        <li class="nav-item dropdown">
          <a class="nav-link dropdown-toggle" id="navbarDropdown" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">Select Category</a>
          <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
            <li><a class="dropdown-item" href="/kiosk/allProducts">All Products</a></li>
            <li><hr class="dropdown-divider" /></li>
            <% categories.forEach(function (category) { %>
              <li>
                <a class="dropdown-item" href="/kiosk/allProducts?category=<%= category.name %>">
                  <%= category.name %> 
                </a>
              </li>
            <% }) %>
          </ul>
        </li>
      </ul>
      <!-- orders -->
        <button type="button" class="btn btn-outline-dark" data-bs-toggle="modal" data-bs-target="#orderSummary">
          <i class="bi-cart-fill me-1"></i>
            Order(s)
          <span class="badge bg-dark text-white ms-1 rounded-pill">0</span>
        </button>
    </div>
  </div>
</nav>

<div class="modal fade" id="orderSummary" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog modal-fullscreen">
    <div class="modal-content h-100 mb-5" style="background-color: transparent;">
      <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
          <div class="col-12">
            <div class="card shadow" style="border-radius: 15px;">
              <div class="modal-header">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="card-body p-0">
                <div class="row g-0">
                  <div class="col-lg-8">
                    <div class="p-5">
                      <div class="d-flex justify-content-between align-items-center mb-5">
                        <h1 class="fw-bold mb-0">Order Summary</h1>
                      </div>
                      <hr class="my-2">
                      <div class="order-summary">
                        <!-- Order items will be inserted here dynamically by JavaScript -->
                      </div>
                    </div>
                  </div>
                  <div class="col-lg-4 mb-5">
                    <div class="p-5">
                      <h3 class="fw-bold mb-5 mt-2 pt-1">Order Total</h3>
                      
                      <hr class="my-4">

                      <div class="d-flex justify-content-between mb-4">
                        <h5 class="text-uppercase badgde">item(s) </h5>
                      </div>

                      <input id="customer-name" type="text" class="customer-name form-control mb-3" placeholder="Customer Name" />

                      <div class="mb-4 pb-2">
                        <select class="form-select">
                          <option selected>Dine In</option>
                          <option value="1">Takeout</option>
                        </select>
                      </div>

                      <hr class="my-4">

                      <div class="d-flex justify-content-between mb-5">
                        <h5 class="text-uppercase">Total price</h5>
                        <h5><span class="total-amount">0.00</span></h5>
                      </div>
                      
                        <button type="button" class="btn btn-dark btn-block btn-lg" data-bs-dismiss="modal">
                          Confirm
                        </button>

                        <button type="button" class="btn btn-danger btn-block btn-lg" data-bs-dismiss="modal">
                          Cancel Order
                        </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<!-- End Customer Order Modal -->

<!-- Receipt Modal -->
<div class="modal fade" id="receiptModal" tabindex="-1" aria-labelledby="receiptModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="receiptModalLabel">Order Summary</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form action="/kiosk/orders" method="POST">
        <div class="modal-body">
          <h4><span id="customerName"></span></h4>
          <h5>Order Number: <span id="orderNumber"></span></h5>
          <div id="receiptOrderSummary">
            <!-- Order items will be dynamically inserted here -->
          </div>
          <hr>
          <div id="orderType">Dine In</div>
          <h6>Total Amount: ₱<span id="receiptTotalAmount"></span></h6>
        </div>
      </form>
      <div class="modal-footer">
        <button type="button" class="btn btn-success" data-bs-dismiss="modal">Confirm Order</button>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<script>
  let orderItems = [];

  document.addEventListener('DOMContentLoaded', function () {
    loadOrderItems(); // Load previously saved order items from localStorage

    document.querySelectorAll('.add-to-order').forEach(button => {
      button.addEventListener('click', function () {
        const productId = this.dataset.id;
        const productName = this.dataset.name;
        const productPrice = parseFloat(this.dataset.price);
        const productImage = this.dataset.image;
        
        addToOrder(productId, productName, productPrice, productImage);
      });
    });
  });

  function addToOrder(productId, productName, productPrice, productImage) {
    const existingProduct = orderItems.find(item => item.id === productId);
    
    if (existingProduct) {
      existingProduct.quantity += 1;
    } else {
      orderItems.push({
        id: productId,
        name: productName,
        price: productPrice,
        image: productImage,
        quantity: 1
      });
    }

    updateOrderSummary();
    updateCartBadge();
    saveOrderItems();  // Save to localStorage
  }

  function incrementProductQuantity(productId) {
    const product = orderItems.find(item => item.id === productId);
    if (product) {
      product.quantity += 1;
      updateOrderSummary();
      updateCartBadge();
      saveOrderItems();  // Save to localStorage
    }
  }

  function decrementProductQuantity(productId) {
    const product = orderItems.find(item => item.id === productId);
    if (product) {
      if (product.quantity > 1) {
        product.quantity -= 1;
      } else {
        // If quantity is 1 and the user tries to decrement, remove the item from the order
        orderItems = orderItems.filter(item => item.id !== productId);
      }
      updateOrderSummary();
      updateCartBadge();
      saveOrderItems();  // Save to localStorage
    }
  }
  
  function updateOrderSummary() {
    const orderSummaryContainer = document.querySelector('.order-summary');
    orderSummaryContainer.innerHTML = ''; // Clear the current order summary

    let totalAmount = 0;

    orderItems.forEach(item => {
      const itemTotal = item.price * item.quantity;
      totalAmount += itemTotal;

      const orderItemHTML = `
        <div class="row mb-4 d-flex justify-content-between align-items-center">
          <div class="col-md-2 col-lg-2 col-xl-2">
            <img src="${item.image}" class="img-fluid rounded-3">
          </div>

          <div class="col-md-3 col-lg-3 col-xl-3">
            <h6 class="mb-1">${item.name}</h6>
          </div>

          <div class="col-md-3 col-lg-3 col-xl-2 d-flex">
            <button class="btn px-2 decrement-item" data-id="${item.id}">
              <svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="#000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-minus"><line x1="5" y1="12" x2="19" y2="12"></line></svg>
            </button>

            <input min="0" value="${item.quantity}" type="number" class="form-control form-control-sm" readonly/>

            <button class="btn btn-link px-2 increment-item" data-id="${item.id}">
              <svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="#000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-plus"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
            </button>
          </div>

          <div class="col-md-3 col-lg-2 col-xl-2 offset-lg-1">
            <h6 class="mb-0">₱${itemTotal.toFixed(2)}</h6>
          </div>
        </div>
        <hr class="my-2">
      `;

      orderSummaryContainer.insertAdjacentHTML('beforeend', orderItemHTML);
    });

    // Update the total amount
    document.querySelector('.total-amount').textContent = `₱${totalAmount.toFixed(2)}`;

    document.querySelectorAll('.increment-item').forEach(button => {
      button.addEventListener('click', function () {
        const productId = this.dataset.id;
        incrementProductQuantity(productId);
      });
    });

    document.querySelectorAll('.decrement-item').forEach(button => {
      button.addEventListener('click', function () {
        const productId = this.dataset.id;
        decrementProductQuantity(productId);
      });
    });
  }

  function updateCartBadge() {
    const totalItems = orderItems.reduce((acc, item) => acc + item.quantity, 0);
    document.querySelector('.badge').textContent = totalItems;
  }

  function saveOrderItems() {
    localStorage.setItem('orderItems', JSON.stringify(orderItems));
  }

  function loadOrderItems() {
    const savedOrderItems = localStorage.getItem('orderItems');
    if (savedOrderItems) {
      orderItems = JSON.parse(savedOrderItems);
      updateOrderSummary();
      updateCartBadge();
    }
  }
  // ------------------------------------------------------------------------
  // RECEIPT MODAL
  document.querySelector('.btn-dark').addEventListener('click', async function() {
  // Capture customer name and order type
  const customerName = document.querySelector('input.customer-name').value;
  const orderType = document.querySelector('.form-select').selectedOptions[0].text;

  // Validate that there are items in the order
  if (orderItems.length === 0) {
    alert('Your order is empty. Please add items to your order before confirming.');
    return; // Stop further execution
  }

  // Validate that the customer name is provided
  if (!customerName) {
    alert('Please enter the customer name.');
    return; // Stop further execution
  }

  // Fetch the new incremental order number from the server
  let orderNumber;
  try {
    const response = await fetch('/kiosk/orders/generate-order-number');
    const data = await response.json();

    if (data.success) {
    orderNumber = data.orderNumber;
    } else {
    alert('Failed to generate order number.');
    return;
    }
  } catch (error) {
    console.error('Error fetching order number:', error);
    alert('An error occurred while generating the order number.');
    return;
  }

  // Set the values in the receipt modal
  document.getElementById('orderNumber').textContent = orderNumber;
  document.getElementById('customerName').textContent = customerName;
  document.getElementById('orderType').textContent = orderType;

  let totalAmount = 0;
  const receiptSummaryContainer = document.getElementById('receiptOrderSummary');
  receiptSummaryContainer.innerHTML = ''; // Clear previous summary

  orderItems.forEach(item => {
    const itemTotal = item.price * item.quantity;
    totalAmount += itemTotal;

    const receiptItemHTML = `
    <div class="d-flex justify-content-between">
      <div>${item.name} (${item.quantity} x ₱${item.price.toFixed(2)})</div>
      <div>₱${itemTotal.toFixed(2)}</div>
    </div>
    `;

    receiptSummaryContainer.insertAdjacentHTML('beforeend', receiptItemHTML);
  });

  document.getElementById('receiptTotalAmount').textContent = totalAmount.toFixed(2);

  // Show the receipt modal
  const receiptModal = new bootstrap.Modal(document.getElementById('receiptModal'));
    receiptModal.show();
  });


  // confirm order ----------------------------------------------------------
  document.querySelector('.btn-success').addEventListener('click', function() {
    const orderNumber = document.getElementById('orderNumber').textContent;
    const customerName = document.getElementById('customerName').textContent;
    const orderType = document.getElementById('orderType').textContent;
    const totalAmount = parseFloat(document.getElementById('receiptTotalAmount').textContent);

    const orderData = {
      orderNumber: orderNumber,
      customerName: customerName,
      orderItems: orderItems,
      orderType: orderType,
      totalAmount: totalAmount,
      status: 'In Process'
    };

    async function submitOrder() {
      try {
        const response = await fetch('/kiosk/orders', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(orderData)
        });

        const data = await response.json();

        if (data.success) {
            alert('Order confirmed');
            clearOrderSummary();
        } else {
            alert('Failed to save the order. Please try again.');
        }
      } catch (error) {
        console.error('Error details:', error);
        alert('An error occurred. Please try again.');
      }
    }

    submitOrder();

    function clearOrderSummary() {
      orderItems = []; // Clear the array holding the order items

      localStorage.removeItem('orderItems'); // Clear the items from localStorage

      const orderSummaryContainer = document.querySelector('.order-summary');
      orderSummaryContainer.innerHTML = ''; // Clear the container

      document.querySelector('input.customer-name').value = '';
      document.querySelector('.form-select').selectedIndex = 0;
      document.querySelector('.total-amount').textContent = '₱0.00';

      updateOrderSummary(); // Re-render the summary with the cleared items
      updateCartBadge(); // Reset the cart badge

      // Reset the receipt modal fields
      document.getElementById('orderNumber').textContent = ''; // Clear order number
      document.getElementById('customerName').textContent = ''; // Clear customer name
      document.getElementById('orderType').textContent = ''; // Clear order type
      document.getElementById('receiptTotalAmount').textContent = '0.00'; // Reset total amount
    }	
    
  });
</script>


